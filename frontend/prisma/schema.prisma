// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                  @id @default(autoincrement())
  email               String               @unique
  name                String
  password            String
  role                String               @default("regular")
  createdAt           DateTime?            @default(now())
  updatedAt           DateTime?            @updatedAt
  personalDetails     PersonalDetails?
  professionalDetails ProfessionalDetails?
  booksPublished      BooksPublished?
  patentsRegistered   PatentsRegistered?
}

model PersonalDetails {
  id            Int     @id @default(autoincrement())
  user          User    @relation(fields: [email], references: [email])
  fullName      String?
  gender        String?
  dateOfBirth   String?
  email         String  @unique
  mobileNumber  String?
  aadharDetails String?
  facultyId     String?
  bloodGroup    String?
}

model ProfessionalDetails {
  id                        Int                        @id @default(autoincrement())
  user                      User                       @relation(fields: [email], references: [email])
  email                     String                     @unique
  department                String?
  designation               String?
  dateOfJoining             String?
  highestQualification      String?
  teachingExperience        String?
  instituteExperience       String?
  educationalQualifications EducationalQualification[]
  recognizedAsResearchGuide String?
  yearOfRecognition         String?
}

model EducationalQualification {
  id                    Int                  @id @default(autoincrement())
  degree                String?
  institute             String?
  yearOfCompletion      String?
  ProfessionalDetails   ProfessionalDetails? @relation(fields: [professionalDetailsId], references: [id])
  professionalDetailsId Int?
}

model BooksPublished {
  id    Int    @id @default(autoincrement())
  user  User   @relation(fields: [email], references: [email])
  email String @unique
  books Book[]
}

model PatentsRegistered {
  id      Int      @id @default(autoincrement())
  user    User     @relation(fields: [email], references: [email])
  email   String   @unique
  patents Patent[]
}

model Book {
  id                Int             @id @default(autoincrement())
  title             String?
  publishers        String?
  yearOfPublication String?
  dateOfPublication String?
  BooksPublished    BooksPublished? @relation(fields: [booksPublishedId], references: [id])
  booksPublishedId  Int?
}

model Patent {
  id                  Int                @id @default(autoincrement())
  type                String?
  applicationNo       String?
  title               String?
  publicationDate     String?
  formFillingDate     String?
  authorList          String?
  publishedYear       String?
  faculty             String?
  PatentsRegistered   PatentsRegistered? @relation(fields: [patentsRegisteredId], references: [id])
  patentsRegisteredId Int?
}
