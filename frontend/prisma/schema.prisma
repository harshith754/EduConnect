// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                  @id @default(autoincrement())
  email               String               @unique
  name                String
  password            String
  role                String               @default("regular")
  createdAt           DateTime?            @default(now())
  updatedAt           DateTime?            @updatedAt
  personalDetails     PersonalDetails?
  professionalDetails ProfessionalDetails?
  booksPublished      BooksPublished?
  patentsRegistered   PatentsRegistered?
  awardsReceived      AwardsReceived?
  lecturesDelivered   LecturesDelivered?
  papersPublished     PapersPublished?
  financialSupport    FinancialSupport? //for workshops
  fellowshipSupport   FellowshipSupport?
  committeeDetails    CommitteeDetails?
  activityDetails     ActivityDetails?
  trainingRevenues    TrainingRevenues?
}

model FellowshipSupport {
  id          Int          @id @default(autoincrement())
  user        User         @relation(fields: [email], references: [email])
  email       String       @unique
  fellowships Fellowship[]
}

model Fellowship {
  id                  Int                @id @default(autoincrement())
  nameOfFellowship    String?
  financialSupport    String?
  purposeOfGrant      String?
  statureOfFellowship String?
  awardingAgency      String?
  dateOfAward         String?
  certificate         String? // Certificate upload field
  FellowshipSupport   FellowshipSupport? @relation(fields: [fellowshipSupportId], references: [id])
  fellowshipSupportId Int?
}

model FinancialSupport {
  id       Int       @id @default(autoincrement())
  user     User      @relation(fields: [email], references: [email])
  email    String    @unique
  supports Support[]
}

model Support {
  id              Int     @id @default(autoincrement())
  title           String?
  dateFrom        String?
  dateTo          String?
  membershipFee   String?
  travelExpenses  String?
  registrationFee String?
  certificate     String?

  amountProvided     String?
  FinancialSupport   FinancialSupport? @relation(fields: [financialSupportId], references: [id])
  financialSupportId Int?
}

model PersonalDetails {
  id            Int     @id @default(autoincrement())
  user          User    @relation(fields: [email], references: [email])
  fullName      String?
  gender        String?
  dateOfBirth   String?
  email         String  @unique
  mobileNumber  String?
  aadharDetails String?
  facultyId     String?
  bloodGroup    String?
  imageId       String?
}

model ProfessionalDetails {
  id                        Int                        @id @default(autoincrement())
  user                      User                       @relation(fields: [email], references: [email])
  email                     String                     @unique
  department                String?
  designation               String?
  dateOfJoining             String?
  highestQualification      String?
  teachingExperience        String?
  instituteExperience       String?
  educationalQualifications EducationalQualification[]
  recognizedAsResearchGuide String?
  yearOfRecognition         String?
  resumeId                  String?
}

model EducationalQualification {
  id                    Int                  @id @default(autoincrement())
  degree                String?
  institute             String?
  yearOfCompletion      String?
  ProfessionalDetails   ProfessionalDetails? @relation(fields: [professionalDetailsId], references: [id])
  professionalDetailsId Int?
  fileId                String?
}

model BooksPublished {
  id    Int    @id @default(autoincrement())
  user  User   @relation(fields: [email], references: [email])
  email String @unique
  books Book[]
}

model Book {
  id                Int             @id @default(autoincrement())
  title             String?
  publishers        String?
  yearOfPublication String?
  dateOfPublication String?
  ISBN              String?
  chapters          String?
  coAuthors         String?
  BooksPublished    BooksPublished? @relation(fields: [booksPublishedId], references: [id])
  booksPublishedId  Int?
  fileId            String?
}

model PatentsRegistered {
  id      Int      @id @default(autoincrement())
  user    User     @relation(fields: [email], references: [email])
  email   String   @unique
  patents Patent[]
}

model Patent {
  id                  Int                @id @default(autoincrement())
  patentType          String?
  applicationNo       String?
  patentTitle         String?
  publicationDate     String?
  formFillingDate     String?
  authorList          String?
  publishedYear       String?
  PatentsRegistered   PatentsRegistered? @relation(fields: [patentsRegisteredId], references: [id])
  patentsRegisteredId Int?
  fileId              String?
}

model AwardsReceived {
  id     Int     @id @default(autoincrement())
  user   User    @relation(fields: [email], references: [email])
  email  String  @unique
  awards Award[]
}

model Award {
  id               Int             @id @default(autoincrement())
  awardName        String?
  agencyName       String?
  agencyEmail      String?
  agencyAddress    String?
  yearReceived     String?
  hasFellowship    String?
  AwardsReceived   AwardsReceived? @relation(fields: [awardsReceivedId], references: [id])
  awardsReceivedId Int?
  fileId           String?
}

model LecturesDelivered {
  id       Int       @id @default(autoincrement())
  user     User      @relation(fields: [email], references: [email])
  email    String    @unique
  lectures Lecture[]
}

model Lecture {
  id                  Int                @id @default(autoincrement())
  title               String?
  dateDelivered       String?
  venue               String?
  organization        String?
  audience            String?
  description         String?
  fileProof           String?
  LecturesDelivered   LecturesDelivered? @relation(fields: [lecturesDeliveredId], references: [id])
  lecturesDeliveredId Int?
}

model PapersPublished {
  id     Int     @id @default(autoincrement())
  user   User    @relation(fields: [email], references: [email])
  email  String  @unique
  papers Paper[]
}

model Paper {
  id                Int              @id @default(autoincrement())
  title             String?
  authors           String?
  yearOfPublication String?
  dateOfPublication String?
  linkToArticle     String?
  numberOfCitations String?
  PapersPublished   PapersPublished? @relation(fields: [papersPublishedId], references: [id])
  papersPublishedId Int?
}

model CommitteeDetails {
  id         Int         @id @default(autoincrement())
  user       User        @relation(fields: [email], references: [email])
  email      String      @unique
  committees Committee[]
}

model Committee {
  id                Int     @id @default(autoincrement())
  committeeName     String?
  durationOfService String?
  proof             String?
  responsibilities  String?
  roleOrPosition    String?

  CommitteeDetails   CommitteeDetails? @relation(fields: [committeeDetailsId], references: [id])
  committeeDetailsId Int?
}

model ActivityDetails {
  id         Int        @id @default(autoincrement())
  user       User       @relation(fields: [email], references: [email])
  email      String     @unique
  activities Activity[]
}

model Activity {
  id             Int     @id @default(autoincrement())
  achievements   String?
  activityName   String?
  certificate    String?
  duration       String?
  impact         String?
  roleOrPosition String?

  ActivityDetails   ActivityDetails? @relation(fields: [activityDetailsId], references: [id])
  activityDetailsId Int?
}

model TrainingRevenues {
  id       Int       @id @default(autoincrement())
  user     User      @relation(fields: [email], references: [email])
  email    String    @unique
  revenues Revenue[]
}

model Revenue {
  id                 Int               @id @default(autoincrement())
  amount             String?
  certificateProof   String?
  dates              String?
  name               String?
  organization       String?
  TrainingRevenues   TrainingRevenues? @relation(fields: [trainingRevenuesId], references: [id])
  trainingRevenuesId Int?
}
